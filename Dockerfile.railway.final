# Dockerfile final optimizado para Railway
FROM node:20-alpine AS builder

# Instalar dependencias del sistema
RUN apk update && \
    apk add --no-cache git ffmpeg wget curl bash openssl python3 make g++

LABEL version="2.3.2" description="Evolution API optimizada para Railway" 
LABEL maintainer="Evolution API Team"

WORKDIR /evolution

# Configurar npm para mejor rendimiento
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-retries 3

# Copiar archivos de configuración
COPY ./package*.json ./
COPY ./tsconfig.json ./
COPY ./tsup.config.ts ./

# Instalar dependencias con manejo de errores mejorado
RUN npm ci --silent --no-audit --no-fund --prefer-offline || \
    (echo "npm ci failed, trying npm install..." && \
     npm install --silent --no-audit --no-fund --prefer-offline) || \
    (echo "npm install failed, trying with legacy peer deps..." && \
     npm install --silent --no-audit --no-fund --legacy-peer-deps)

# Copiar código fuente
COPY ./src ./src
COPY ./public ./public
COPY ./prisma ./prisma
COPY ./manager ./manager
COPY ./runWithProvider.js ./

# Copiar scripts de Docker
COPY ./Docker ./Docker

# Hacer ejecutables los scripts
RUN chmod +x ./Docker/scripts/* && dos2unix ./Docker/scripts/*

# Generar configuración de base de datos
RUN ./Docker/scripts/generate_database.sh

# Construir la aplicación
RUN npm run build

# Imagen final optimizada
FROM node:20-alpine AS final

# Instalar dependencias mínimas
RUN apk update && \
    apk add --no-cache tzdata ffmpeg bash openssl curl

# Configurar zona horaria
ENV TZ=UTC
ENV DOCKER_ENV=true
ENV NODE_ENV=production

WORKDIR /evolution

# Copiar archivos necesarios
COPY --from=builder /evolution/package.json ./package.json
COPY --from=builder /evolution/package-lock.json ./package-lock.json
COPY --from=builder /evolution/node_modules ./node_modules
COPY --from=builder /evolution/dist ./dist
COPY --from=builder /evolution/prisma ./prisma
COPY --from=builder /evolution/manager ./manager
COPY --from=builder /evolution/public ./public
COPY --from=builder /evolution/Docker ./Docker
COPY --from=builder /evolution/runWithProvider.js ./runWithProvider.js
COPY --from=builder /evolution/tsup.config.ts ./tsup.config.ts

# Crear directorio para instancias
RUN mkdir -p /evolution/instances

# Configurar permisos
RUN chown -R node:node /evolution
USER node

# Exponer puerto
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/manager || exit 1

# Comando de inicio
ENTRYPOINT ["/bin/bash", "-c", ". ./Docker/scripts/deploy_database.sh && npm run start:prod"]
